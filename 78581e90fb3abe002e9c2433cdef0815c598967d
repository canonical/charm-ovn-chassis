{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b79c9b9_e7ef73e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "This is a problem indeed, and charms should not really be involved in upbringing of a system.\n\nWhy not use the `iptables-persistent` / `netfilter-persistent` packages to persist the rules instead?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8040d7d8_66dfd716",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "I believe the problem described here is a side effect of interaction between the system and the software managed by the charm. Many people are already hacking through it in various ways. In the end, that can lead to problems caused by these \"hacks\" and dialogues like, \"ah yes, somebody put a NOTRACK rule in the table two years ago. That\u0027s why the connections were failing\". The ability to mitigate this side effect in a controlled manner using a charm option would significantly decrease our support efforts and the number of related bug reports.",
      "parentUuid": "7b79c9b9_e7ef73e0",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58d767ee_7f434507",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-26T06:04:05Z",
      "side": 1,
      "message": "About the configuration option:\nAdding a configuration option is like releasing an API, you can never stop supporting it, so I don\u0027t buy your argument. You\u0027re just putting the burden somewhere else.\n\nThe functionality you add is as we\u0027ve discovered required to operate a cloud at scale and our charms should be opinionated and just do the right thing for our users. This is clearly something the end user would not want nor need to know about.\n\nChanges in behavior like this is managed through new charm versions, tracks and channels.\n\n\nAbout system initialization:\nJust want to repeat that the charm code has to be outside the equation for bringing the system up to the expected state after a system reboot.\n\nThe charm\u0027s job is to install packages, enable configuration and services so that the system operates as expected, not be a required part of the boot process. So we either need to use one of the rule persistence services available in Ubuntu, or create some other mechanism for bringing the rule back on reboot that is independent of Juju and the charm.",
      "parentUuid": "8040d7d8_66dfd716",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c3ae7df_e4699dec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-09-01T12:52:57Z",
      "side": 1,
      "message": "Hello Frode, sorry for the late response, I was on PTO. Ack, I\u0027ll submit a bare-bone, simple patch to the base charm code.",
      "parentUuid": "58d767ee_7f434507",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2462a41_6ed9f5ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "Hello, Mustafa,\n\nThank you for taking the time to work on this issue, that is much appreciated!\n\nI have a few comments in-line and a general feedback on the approach here:\n1) The organization of the ovn-chassis and ovn-dedicated-chassis charms are a bit special. This is because the charms share 99% of the code base but one is a subordinate charm while the other is a principal charm. To allow code sharing between the two, the entire chassis code base is hosted in the ovn layer hosted at [0].\n\nThis addition would be relevant for both charms, so please target that repository with your changes.\n\n2) While I commend your effort to generalize this code, and add extra helpers to attach and detach chains etc, I wonder if this is all a bit overkill for the problem at hand?\n\nThe `nft` and `iptables` tools are quite good at finding existing rules, and the rules we need to add are quite simple.\n\nWould it make sense to just add the rule to the PREROUTING and OUTPUT chains directly?\n\n3) The charm should not be involved in the upbringing of the system, would it make sense to use the Ubuntu `iptables-persistent` / `netfilter-persistent` packages for taking care of system initialization instead?\n\n0: https://github.com/openstack-charmers/charm-layer-ovn/",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70b5992e_8e6599a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "Hello Frode,\n\nThank you for reviewing this and sharing your comments with me. I\u0027m pretty new in charm development, and everything is not immediately apparent. So in that aspect, I find your comments enlightening in many ways. Every single word counts :)\n\nFor 1, it makes sense; I\u0027ll re-target this MP to the OVN layer.\n\nFor 2 \u0026 3, I\u0027ve replied to their respective threads.",
      "parentUuid": "c2462a41_6ed9f5ba",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cfc73da_a8d2972e",
        "filename": "src/config.yaml",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "In essence this is a workaround for what to me appears like a long standing kernel bug.\n\nDoes this really need to be configurable at all?",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "706f969f_25abdf87",
        "filename": "src/config.yaml",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "Well, I\u0027m unsure that we can consider this a kernel bug. nf_conntrack\u0027s job is to track the network flow lifecycle, so it does what it is designed for. From a networking perspective, GENEVE is altering the five-tuple that determines the \"ID\" of a network flow, so each flow is a `unique\u0027 network flow. As a result, nf_conntrack tracks every single GENEVE flow individually. That is not a flaw that we have in nf_conntrack. That is a flaw in how we identify unique network flows. The main problem here is that GENEVE is trying to leverage this flaw to achieve an even load distribution, which plays badly with nf_conntrack.\n\nI wanted this feature to be behind an option flag and opt-in because it might have unintended side effects.",
      "parentUuid": "3cfc73da_a8d2972e",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344d4cbc_8dd25ee6",
        "filename": "src/config.yaml",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-26T06:04:05Z",
      "side": 1,
      "message": "When everyone has to hack around this side effect, it\u0027s a clear sign there is changes needed in the kernel. It will take time but we\u0027ll eventually get this fixed there for sure.\n\nIn the mean time we do indeed need to work around this for existing users, and the best thing to do would be to make sure there chances of unintended side effects is as small as possible.",
      "parentUuid": "706f969f_25abdf87",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62ae3013_b4a8eead",
        "filename": "src/lib/charm/openstack/basic_ipt_helper.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "While I commend your effort to generalize this code, and add extra helpers to attach and detach chains etc, I wonder if this is all a bit overkill for the problem at hand?\n\nThe `nft` and `iptables` tools are quite good at finding existing rules, and the rules we need to add are quite simple.\n\nWould it make sense to just add the two rules to the PREROUTING and OUTPUT chains directly?",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "634a1981_18f02594",
        "filename": "src/lib/charm/openstack/basic_ipt_helper.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "I wanted this design to have minimum disruption on the existing iptables layout. A dedicated chain eliminates rule duplication in tables and trivializes removing all added rules (e.g., simply detach/flush and delete the chain). The alternative is to iterate PREROUTING and OUTPUT chains, and find \u0026 erase the correct rules. The design also supports having an arbitrary number of NOTRACK rules for flexibility, so grouping them in a chain makes management more effortless. Having a dedicated chain also makes this operation transactional.\n\nAnother concern is that the user may have their NOTRACK rules in the chains (for whatever reasons), and I don\u0027t want to mess with them accidentally. I thought it would be safer to implement it this way.\n\nAlthough this problem seems specific to this charm, I think it might manifest itself in other charms as well, so having a reusable code for this stuff will make porting the changes more straightforward.",
      "parentUuid": "62ae3013_b4a8eead",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11813a1c_00e978ce",
        "filename": "src/lib/charm/openstack/basic_ipt_helper.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-26T06:04:05Z",
      "side": 1,
      "message": "For this specific use case there is very little room for variation for the rules we need to maintain, so a simple `iptables -C` call to check if the rule is already there before inserting would be sufficient. If it\u0027s there, either because we or someone else put it there, we don\u0027t need to do anything.\n\nThe charm would know what rules are needed depending on what encap the chassis uses, so there is no need for this to be configurable. At this point in time only Geneve is supported by the charms.\n\nThinking about future re-usability for the code is a great trait, but do wait until you actually have more than one place to use it before creating a generic reusable function/class. Otherwise you will just end up with unnecessary code to maintain (and potential bugs) if it turns out you didn\u0027t need it elsewhere.",
      "parentUuid": "634a1981_18f02594",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d165d29b_20bc6bde",
        "filename": "src/lib/charm/openstack/ovn_chassis.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "While I commend your effort to generalize this code, and add extra helpers to attach and detach chains etc, I wonder if this is all a bit overkill for the problem at hand?\n\nThe `nft` and `iptables` tools are quite good at finding existing rules, and the rules we need to add are quite simple.\n\nWould it make sense to just add the two rules to the PREROUTING and OUTPUT chains directly?",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7aed93a_9a850ead",
        "filename": "src/lib/charm/openstack/ovn_chassis.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "I wanted this design to have minimum disruption on the existing iptables layout. A dedicated chain eliminates rule duplication in tables and trivializes removing all added rules (e.g., simply detach/flush and delete the chain). The alternative is to iterate PREROUTING and OUTPUT chains, and find \u0026 erase the correct rules. The design also supports having an arbitrary number of NOTRACK rules for flexibility, so grouping them in a chain makes management more effortless. Having a dedicated chain also makes this operation transactional.\n\nAnother concern is that the user may have their NOTRACK rules in the chains (for whatever reasons), and I don\u0027t want to mess with them accidentally. I thought it would be safer to implement it this way.\n\nAlthough this problem seems specific to this charm, I think it might manifest itself in other charms as well, so having a reusable code for this stuff will make porting the changes more straightforward.",
      "parentUuid": "d165d29b_20bc6bde",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4528ee_81dfa836",
        "filename": "src/lib/charm/openstack/ovn_chassis.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-26T06:04:05Z",
      "side": 1,
      "message": "For this specific use case there is very little room for variation for the rules we need to maintain, so a simple `iptables -C` call to check if the rule is already there before inserting would be sufficient. If it\u0027s there, either because we or someone else put it there, we don\u0027t need to do anything.\n\nThe charm would know what rules are needed depending on what encap the chassis uses, so there is no need for this to be configurable. At this point in time only Geneve is supported by the charms.\n\nThinking about future re-usability for the code is a great trait, but do wait until you actually have more than one place to use it before creating a generic reusable function/class. Otherwise you will just end up with unnecessary code to maintain (and potential bugs) if it turns out you didn\u0027t need it elsewhere.",
      "parentUuid": "e7aed93a_9a850ead",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f8091e_d2b2b40f",
        "filename": "src/tests/unit/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-25T11:35:36Z",
      "side": 1,
      "message": "The unit tests for reactive charms live in the top level `unit_tests` folder.\n\nFor this specific charm they actually live in a different repository as mentioned in unit_tests/README.md.",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04554577_d082dae3",
        "filename": "src/tests/unit/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 34980
      },
      "writtenOn": "2022-08-25T13:04:52Z",
      "side": 1,
      "message": "Well, I was unaware of that. Thanks for letting me know. Is there a reason for unit tests to live in a different repository? It is unusual.",
      "parentUuid": "18f8091e_d2b2b40f",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d8b2523_77b24d85",
        "filename": "src/tests/unit/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 13686
      },
      "writtenOn": "2022-08-26T06:04:05Z",
      "side": 1,
      "message": "Well, since the charm code lives in a different repository, it\u0027s not that unusual :-)",
      "parentUuid": "04554577_d082dae3",
      "revId": "78581e90fb3abe002e9c2433cdef0815c598967d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}